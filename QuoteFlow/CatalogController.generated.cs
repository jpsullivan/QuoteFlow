// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace QuoteFlow.Controllers
{
    public partial class CatalogController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected CatalogController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateCatalog()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateCatalog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ShowAssets()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowAssets);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ShowAssetsInteractive()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowAssetsInteractive);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowImportSummary()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowImportSummary);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Admin()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Admin);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CatalogController Actions { get { return MVC.Catalog; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Catalog";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Catalog";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string New = "New";
            public readonly string CreateCatalog = "CreateCatalog";
            public readonly string Show = "Show";
            public readonly string ShowAssets = "ShowAssets";
            public readonly string ShowAssetsInteractive = "ShowAssetsInteractive";
            public readonly string ShowImportSummary = "ShowImportSummary";
            public readonly string Admin = "Admin";
            public readonly string Import = "Import";
            public readonly string ImportCatalogProgress = "ImportCatalogProgress";
            public readonly string SetImportCatalogDetails = "SetImportCatalogDetails";
            public readonly string VerifyImport = "VerifyImport";
            public readonly string VerifyImportSecondary = "VerifyImportSecondary";
            public readonly string CancelImport = "CancelImport";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string New = "New";
            public const string CreateCatalog = "CreateCatalog";
            public const string Show = "Show";
            public const string ShowAssets = "ShowAssets";
            public const string ShowAssetsInteractive = "ShowAssetsInteractive";
            public const string ShowImportSummary = "ShowImportSummary";
            public const string Admin = "Admin";
            public const string Import = "Import";
            public const string ImportCatalogProgress = "ImportCatalogProgress";
            public const string SetImportCatalogDetails = "SetImportCatalogDetails";
            public const string VerifyImport = "VerifyImport";
            public const string VerifyImportSecondary = "VerifyImportSecondary";
            public const string CancelImport = "CancelImport";
        }


        static readonly ActionParamsClass_CreateCatalog s_params_CreateCatalog = new ActionParamsClass_CreateCatalog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateCatalog CreateCatalogParams { get { return s_params_CreateCatalog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateCatalog
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string catalogId = "catalogId";
            public readonly string catalogName = "catalogName";
        }
        static readonly ActionParamsClass_ShowAssets s_params_ShowAssets = new ActionParamsClass_ShowAssets();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowAssets ShowAssetsParams { get { return s_params_ShowAssets; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowAssets
        {
            public readonly string catalogId = "catalogId";
            public readonly string catalogName = "catalogName";
            public readonly string page = "page";
        }
        static readonly ActionParamsClass_ShowAssetsInteractive s_params_ShowAssetsInteractive = new ActionParamsClass_ShowAssetsInteractive();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowAssetsInteractive ShowAssetsInteractiveParams { get { return s_params_ShowAssetsInteractive; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowAssetsInteractive
        {
            public readonly string catalogId = "catalogId";
            public readonly string catalogName = "catalogName";
            public readonly string page = "page";
        }
        static readonly ActionParamsClass_ShowImportSummary s_params_ShowImportSummary = new ActionParamsClass_ShowImportSummary();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowImportSummary ShowImportSummaryParams { get { return s_params_ShowImportSummary; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowImportSummary
        {
            public readonly string catalogId = "catalogId";
            public readonly string catalogName = "catalogName";
            public readonly string filter = "filter";
            public readonly string page = "page";
        }
        static readonly ActionParamsClass_Admin s_params_Admin = new ActionParamsClass_Admin();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Admin AdminParams { get { return s_params_Admin; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Admin
        {
            public readonly string catalogId = "catalogId";
            public readonly string catalogName = "catalogName";
        }
        static readonly ActionParamsClass_Import s_params_Import = new ActionParamsClass_Import();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Import ImportParams { get { return s_params_Import; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Import
        {
            public readonly string uploadFile = "uploadFile";
        }
        static readonly ActionParamsClass_SetImportCatalogDetails s_params_SetImportCatalogDetails = new ActionParamsClass_SetImportCatalogDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetImportCatalogDetails SetImportCatalogDetailsParams { get { return s_params_SetImportCatalogDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetImportCatalogDetails
        {
            public readonly string catalogDetails = "catalogDetails";
        }
        static readonly ActionParamsClass_VerifyImport s_params_VerifyImport = new ActionParamsClass_VerifyImport();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_VerifyImport VerifyImportParams { get { return s_params_VerifyImport; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_VerifyImport
        {
            public readonly string formData = "formData";
        }
        static readonly ActionParamsClass_VerifyImportSecondary s_params_VerifyImportSecondary = new ActionParamsClass_VerifyImportSecondary();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_VerifyImportSecondary VerifyImportSecondaryParams { get { return s_params_VerifyImportSecondary; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_VerifyImportSecondary
        {
            public readonly string form = "form";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Admin = "Admin";
                public readonly string Import = "Import";
                public readonly string Index = "Index";
                public readonly string New = "New";
                public readonly string SetImportCatalogDetails = "SetImportCatalogDetails";
                public readonly string Show = "Show";
                public readonly string ShowAssets = "ShowAssets";
                public readonly string ShowAssetsInteractive = "ShowAssetsInteractive";
                public readonly string ShowImportSummary = "ShowImportSummary";
                public readonly string VerifyImport = "VerifyImport";
                public readonly string VerifyImportSecondary = "VerifyImportSecondary";
            }
            public readonly string Admin = "~/Views/Catalog/Admin.cshtml";
            public readonly string Import = "~/Views/Catalog/Import.cshtml";
            public readonly string Index = "~/Views/Catalog/Index.cshtml";
            public readonly string New = "~/Views/Catalog/New.cshtml";
            public readonly string SetImportCatalogDetails = "~/Views/Catalog/SetImportCatalogDetails.cshtml";
            public readonly string Show = "~/Views/Catalog/Show.cshtml";
            public readonly string ShowAssets = "~/Views/Catalog/ShowAssets.cshtml";
            public readonly string ShowAssetsInteractive = "~/Views/Catalog/ShowAssetsInteractive.cshtml";
            public readonly string ShowImportSummary = "~/Views/Catalog/ShowImportSummary.cshtml";
            public readonly string VerifyImport = "~/Views/Catalog/VerifyImport.cshtml";
            public readonly string VerifyImportSecondary = "~/Views/Catalog/VerifyImportSecondary.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_CatalogController : QuoteFlow.Controllers.CatalogController
    {
        public T4MVC_CatalogController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void NewOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult New()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.New);
            NewOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CreateCatalogOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, QuoteFlow.Models.ViewModels.NewCatalogModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateCatalog(QuoteFlow.Models.ViewModels.NewCatalogModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateCatalog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateCatalogOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int catalogId, string catalogName);

        [NonAction]
        public override System.Web.Mvc.ActionResult Show(int catalogId, string catalogName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogId", catalogId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogName", catalogName);
            ShowOverride(callInfo, catalogId, catalogName);
            return callInfo;
        }

        [NonAction]
        partial void ShowAssetsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int catalogId, string catalogName, int? page);

        [NonAction]
        public override System.Web.Mvc.ActionResult ShowAssets(int catalogId, string catalogName, int? page)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowAssets);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogId", catalogId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogName", catalogName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ShowAssetsOverride(callInfo, catalogId, catalogName, page);
            return callInfo;
        }

        [NonAction]
        partial void ShowAssetsInteractiveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int catalogId, string catalogName, int? page);

        [NonAction]
        public override System.Web.Mvc.ActionResult ShowAssetsInteractive(int catalogId, string catalogName, int? page)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowAssetsInteractive);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogId", catalogId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogName", catalogName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ShowAssetsInteractiveOverride(callInfo, catalogId, catalogName, page);
            return callInfo;
        }

        [NonAction]
        partial void ShowImportSummaryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int catalogId, string catalogName, string filter, int? page);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowImportSummary(int catalogId, string catalogName, string filter, int? page)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowImportSummary);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogId", catalogId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogName", catalogName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filter", filter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ShowImportSummaryOverride(callInfo, catalogId, catalogName, filter, page);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AdminOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int catalogId, string catalogName);

        [NonAction]
        public override System.Web.Mvc.ActionResult Admin(int catalogId, string catalogName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Admin);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogId", catalogId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogName", catalogName);
            AdminOverride(callInfo, catalogId, catalogName);
            return callInfo;
        }

        [NonAction]
        partial void ImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Import()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Import);
            ImportOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.HttpPostedFileBase uploadFile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Import(System.Web.HttpPostedFileBase uploadFile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Import);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "uploadFile", uploadFile);
            ImportOverride(callInfo, uploadFile);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ImportCatalogProgressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ImportCatalogProgress()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportCatalogProgress);
            ImportCatalogProgressOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SetImportCatalogDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SetImportCatalogDetails()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetImportCatalogDetails);
            SetImportCatalogDetailsOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void SetImportCatalogDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, QuoteFlow.Models.ViewModels.NewCatalogModel catalogDetails);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SetImportCatalogDetails(QuoteFlow.Models.ViewModels.NewCatalogModel catalogDetails)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetImportCatalogDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catalogDetails", catalogDetails);
            SetImportCatalogDetailsOverride(callInfo, catalogDetails);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void VerifyImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyImport()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyImport);
            VerifyImportOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void VerifyImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, QuoteFlow.Models.ViewModels.VerifyCatalogImportViewModel formData);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyImport(QuoteFlow.Models.ViewModels.VerifyCatalogImportViewModel formData)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyImport);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "formData", formData);
            VerifyImportOverride(callInfo, formData);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void VerifyImportSecondaryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyImportSecondary()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyImportSecondary);
            VerifyImportSecondaryOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void VerifyImportSecondaryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.Mvc.FormCollection form);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyImportSecondary(System.Web.Mvc.FormCollection form)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyImportSecondary);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "form", form);
            VerifyImportSecondaryOverride(callInfo, form);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void CancelImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CancelImport()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CancelImport);
            CancelImportOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
