// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static QuoteFlow.Controllers.AuthenticationController Authentication = new QuoteFlow.Controllers.T4MVC_AuthenticationController();
    public static QuoteFlow.Controllers.DashboardController Dashboard = new QuoteFlow.Controllers.T4MVC_DashboardController();
    public static QuoteFlow.Controllers.UsersController Users = new QuoteFlow.Controllers.T4MVC_UsersController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string jquery_1_10_2_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.intellisense.min.js") ? Url("jquery-1.10.2.intellisense.min.js") : Url("jquery-1.10.2.intellisense.js");
        public static readonly string jquery_1_10_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.min.js") ? Url("jquery-1.10.2.min.js") : Url("jquery-1.10.2.js");
        public static readonly string jquery_1_10_2_min_js = Url("jquery-1.10.2.min.js");
        public static readonly string jquery_1_10_2_min_map = Url("jquery-1.10.2.min.map");
        public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lib {
                private const string URLPATH = "~/Content/css/lib";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class aui {
                    private const string URLPATH = "~/Content/css/lib/aui";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string arrow_png = Url("arrow.png");
                    public static readonly string atlassian_icons_eot = Url("atlassian-icons.eot");
                    public static readonly string atlassian_icons_svg = Url("atlassian-icons.svg");
                    public static readonly string atlassian_icons_ttf = Url("atlassian-icons.ttf");
                    public static readonly string atlassian_icons_woff = Url("atlassian-icons.woff");
                    public static readonly string aui_all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-all.min.css") ? Url("aui-all.min.css") : Url("aui-all.css");
                         
                    public static readonly string aui_experimental_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-experimental.min.css") ? Url("aui-experimental.min.css") : Url("aui-experimental.css");
                         
                    public static readonly string aui_icon_close_png = Url("aui-icon-close.png");
                    public static readonly string aui_icon_tools_gif = Url("aui-icon-tools.gif");
                    public static readonly string aui_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-ie.min.css") ? Url("aui-ie.min.css") : Url("aui-ie.css");
                         
                    public static readonly string aui_ie9_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-ie9.min.css") ? Url("aui-ie9.min.css") : Url("aui-ie9.css");
                         
                    public static readonly string aui_message_icon_sprite_png = Url("aui-message-icon-sprite.png");
                    public static readonly string aui_toolbar_24px_png = Url("aui-toolbar-24px.png");
                    public static readonly string aui_toolbar_button_active_bg_png = Url("aui-toolbar-button-active-bg.png");
                    public static readonly string aui_toolbar_button_inactive_bg_png = Url("aui-toolbar-button-inactive-bg.png");
                    public static readonly string aui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui.min.css") ? Url("aui.min.css") : Url("aui.css");
                         
                    public static readonly string bg_000_trans20_png = Url("bg-000-trans20.png");
                    public static readonly string bg_000_trans50_png = Url("bg-000-trans50.png");
                    public static readonly string bg_grippy_png = Url("bg-grippy.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class core {
                        private const string URLPATH = "~/Content/css/lib/aui/core";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string icon_dropdown_active_d_png = Url("icon-dropdown-active-d.png");
                        public static readonly string icon_dropdown_active_png = Url("icon-dropdown-active.png");
                        public static readonly string icon_dropdown_d_png = Url("icon-dropdown-d.png");
                        public static readonly string icon_dropdown_png = Url("icon-dropdown.png");
                        public static readonly string icon_maximize_d_png = Url("icon-maximize-d.png");
                        public static readonly string icon_maximize_png = Url("icon-maximize.png");
                        public static readonly string icon_minimize_d_png = Url("icon-minimize-d.png");
                        public static readonly string icon_minimize_png = Url("icon-minimize.png");
                        public static readonly string icon_move_d_png = Url("icon-move-d.png");
                        public static readonly string icon_move_png = Url("icon-move.png");
                        public static readonly string icon_search_png = Url("icon-search.png");
                    }
                
                    public static readonly string fav_off_16_png = Url("fav_off_16.png");
                    public static readonly string fav_on_16_png = Url("fav_on_16.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class forms {
                        private const string URLPATH = "~/Content/css/lib/aui/forms";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string icon_date_png = Url("icon-date.png");
                        public static readonly string icon_help_png = Url("icon-help.png");
                        public static readonly string icon_range_png = Url("icon-range.png");
                        public static readonly string icon_required_png = Url("icon-required.png");
                        public static readonly string icon_users_png = Url("icon-users.png");
                        public static readonly string icons_form_gif = Url("icons_form.gif");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class icons {
                        private const string URLPATH = "~/Content/css/lib/aui/icons";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string aui_icon_close_png = Url("aui-icon-close.png");
                        public static readonly string aui_icon_tools_gif = Url("aui-icon-tools.gif");
                        public static readonly string aui_message_icon_sprite_png = Url("aui-message-icon-sprite.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class core {
                            private const string URLPATH = "~/Content/css/lib/aui/icons/core";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string icon_dropdown_active_d_png = Url("icon-dropdown-active-d.png");
                            public static readonly string icon_dropdown_active_png = Url("icon-dropdown-active.png");
                            public static readonly string icon_dropdown_d_png = Url("icon-dropdown-d.png");
                            public static readonly string icon_dropdown_png = Url("icon-dropdown.png");
                            public static readonly string icon_maximize_d_png = Url("icon-maximize-d.png");
                            public static readonly string icon_maximize_png = Url("icon-maximize.png");
                            public static readonly string icon_minimize_d_png = Url("icon-minimize-d.png");
                            public static readonly string icon_minimize_png = Url("icon-minimize.png");
                            public static readonly string icon_move_d_png = Url("icon-move-d.png");
                            public static readonly string icon_move_png = Url("icon-move.png");
                            public static readonly string icon_search_png = Url("icon-search.png");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class forms {
                            private const string URLPATH = "~/Content/css/lib/aui/icons/forms";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string icon_date_png = Url("icon-date.png");
                            public static readonly string icon_help_png = Url("icon-help.png");
                            public static readonly string icon_range_png = Url("icon-range.png");
                            public static readonly string icon_required_png = Url("icon-required.png");
                            public static readonly string icon_users_png = Url("icon-users.png");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class messages {
                            private const string URLPATH = "~/Content/css/lib/aui/icons/messages";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string icon_close_inverted_png = Url("icon-close-inverted.png");
                            public static readonly string icon_close_png = Url("icon-close.png");
                            public static readonly string icon_error_white_png = Url("icon-error-white.png");
                            public static readonly string icon_error_png = Url("icon-error.png");
                            public static readonly string icon_generic_png = Url("icon-generic.png");
                            public static readonly string icon_hint_png = Url("icon-hint.png");
                            public static readonly string icon_info_png = Url("icon-info.png");
                            public static readonly string icon_success_png = Url("icon-success.png");
                            public static readonly string icon_warning_png = Url("icon-warning.png");
                        }
                    
                    }
                
                    public static readonly string icons_form_gif = Url("icons_form.gif");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class messages {
                        private const string URLPATH = "~/Content/css/lib/aui/messages";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string icon_close_inverted_png = Url("icon-close-inverted.png");
                        public static readonly string icon_close_png = Url("icon-close.png");
                        public static readonly string icon_error_white_png = Url("icon-error-white.png");
                        public static readonly string icon_error_png = Url("icon-error.png");
                        public static readonly string icon_generic_png = Url("icon-generic.png");
                        public static readonly string icon_hint_png = Url("icon-hint.png");
                        public static readonly string icon_info_png = Url("icon-info.png");
                        public static readonly string icon_success_png = Url("icon-success.png");
                        public static readonly string icon_warning_png = Url("icon-warning.png");
                    }
                
                    public static readonly string select2_spinner_gif = Url("select2-spinner.gif");
                    public static readonly string select2_png = Url("select2.png");
                    public static readonly string select2x2_png = Url("select2x2.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class toolbar {
                        private const string URLPATH = "~/Content/css/lib/aui/toolbar";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string aui_toolbar_24px_png = Url("aui-toolbar-24px.png");
                        public static readonly string aui_toolbar_button_active_bg_png = Url("aui-toolbar-button-active-bg.png");
                        public static readonly string aui_toolbar_button_inactive_bg_png = Url("aui-toolbar-button-inactive-bg.png");
                    }
                
                    public static readonly string wait_gif = Url("wait.gif");
                }
            
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class js {
            private const string URLPATH = "~/Content/js";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lib {
                private const string URLPATH = "~/Content/js/lib";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class aui {
                    private const string URLPATH = "~/Content/js/lib/aui";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string aui_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-all.min.js") ? Url("aui-all.min.js") : Url("aui-all.js");
                    public static readonly string aui_dependencies_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-dependencies.min.js") ? Url("aui-dependencies.min.js") : Url("aui-dependencies.js");
                    public static readonly string aui_experimental_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-experimental.min.js") ? Url("aui-experimental.min.js") : Url("aui-experimental.js");
                    public static readonly string aui_ie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-ie.min.js") ? Url("aui-ie.min.js") : Url("aui-ie.js");
                    public static readonly string aui_soy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui-soy.min.js") ? Url("aui-soy.min.js") : Url("aui-soy.js");
                    public static readonly string aui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aui.min.js") ? Url("aui.min.js") : Url("aui.js");
                }
            
            }
        
        }
    
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


